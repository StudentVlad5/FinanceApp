const { ValidationError } = require('../../helpers');
const { Reestr } = require('../../models');

const getReestrById = async (req, res, next) => {
  const { id } = req.params;

  try {
    const numericId = Number(id);
    if (isNaN(numericId)) throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID');

    // –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
    const allDocs = await Reestr.find();

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ {RE_SCH_ID: [RE_ID]}
    const dictionary = {};

    allDocs.forEach((doc) => {
      const { RE_SCH_ID, RE_ID } = doc;
      if (!dictionary[RE_SCH_ID]) {
        dictionary[RE_SCH_ID] = [];
      }

      if (RE_ID !== -1) {
        dictionary[RE_SCH_ID].push(RE_ID);
      } else {
        dictionary[RE_SCH_ID] = [-1]; // –Ø–∫—â–æ RE_ID === -1, —Ç–æ —Å—Ç–∞–≤–∏–º–æ RE_SCH_ID = -1
      }
    });

    let updatedCount = 0;

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç
    for (const doc of allDocs) {
      const transReId = doc.RE_TRANS_RE;

      // –Ø–∫—â–æ RE_TRANS_RE –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É —Å–ª–æ–≤–Ω–∏–∫—É, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
      let transSchId = -1;

      // –®—É–∫–∞—î–º–æ –≤ —Å–ª–æ–≤–Ω–∏–∫—É, –¥–µ RE_ID —î —á–∞—Å—Ç–∏–Ω–æ—é –∑–Ω–∞—á–µ–Ω–Ω—è RE_SCH_ID
      for (const key in dictionary) {
        if (dictionary[key].includes(transReId)) {
          transSchId = Number(key); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ RE_SCH_ID —è–∫ –∫–ª—é—á –∑ —Å–ª–æ–≤–Ω–∏–∫–∞
          break;
        }
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π _id —ñ —á–∏ —î –¥–æ–∫—É–º–µ–Ω—Ç
      const docToUpdate = await Reestr.findOne({ _id: doc._id });
      if (!docToUpdate) {
        console.log(`–î–æ–∫—É–º–µ–Ω—Ç –∑ _id ${doc._id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.`);
        continue;
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç –∑ –Ω–æ–≤–∏–º RE_TRANS_SCH_ID
      let updateResult = await Reestr.findById({ _id: doc._id });

      const updatedDoc = {
        RE_DATE: updateResult.RE_DATE,
        RE_KOMENT: updateResult.RE_KOMENT,
        RE_PAYE_ID: Number(updateResult.RE_PAYE_ID),
        RE_CAT_ID: Number(updateResult.RE_CAT_ID),
        RE_MONEY: updateResult.RE_MONEY,
        RE_SUM: updateResult.RE_SUM,
        RE_INCR: Number(updateResult.RE_INCR),
        RE_TRANS_RE: Number(updateResult.RE_TRANS_RE),
        RE_KURS: updateResult.RE_KURS,
        RE_TAG: updateResult.RE_TAG,
        RE_KVO: updateResult.RE_KVO,
        RE_TAS_ID: Number(updateResult.RE_TAS_ID),
        RE_CLEAR: Number(updateResult.RE_CLEAR),
        RE_USER: updateResult.RE_USER,
        RE_ATTACH: updateResult.RE_ATTACH,
        RE_SCH_ID: Number(updateResult.RE_SCH_ID),
        RE_ID: Number(updateResult.RE_ID),
        RE_TRANS_SCH_ID: Number(transSchId), // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
      };

      // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
      let removeResult = await Reestr.replaceOne(
        { _id: doc._id },
        updatedDoc, // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
      );

      if (removeResult.nModified === 0) {
        console.log(
          `–î–æ–∫—É–º–µ–Ω—Ç –∑ _id ${doc._id} –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–∏–π, –º–æ–∂–ª–∏–≤–æ, –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è.`,
        );
      }

      updatedCount++;

      // –õ–æ–≥ –∫–æ–∂–Ω—ñ 500 –æ–Ω–æ–≤–ª–µ–Ω—å
      if (updatedCount % 50 === 0) {
        console.log(`üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤`);
      }
    }

    console.log(`‚úÖ –£—Å—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤`);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    // const reestrById = await Reestr.aggregate([
    //   {
    //     $match: {
    //       RE_SCH_ID: numericId,
    //     },
    //   },
    // ]);
    // res.status(200).json(reestrById);
  } catch (err) {
    throw new ValidationError(err.message);
  }
};

module.exports = getReestrById;
