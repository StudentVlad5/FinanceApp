const { Categories } = require('../../models');
// const fs = require('fs');
// let count = 1;

const getAllCategories = async (req, res) => {
  try {
    const categories = await Categories.find();
    res.status(200).json({ success: true, data: categories });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }

  // async function migrate() {
  //   count += 1;
  //   // –≤–∏–¥–∞–ª–∏–º–æ —Å—Ç–∞—Ä—ñ —ñ–Ω–¥–µ–∫—Å–∏ (–∑–∞–ª–∏—à–∏–ª–∏—Å—å CAT0_ID_1 —ñ —Ç.–¥.)
  //   try {
  //     await Categories.collection.dropIndexes();
  //     console.log('üóëÔ∏è –°—Ç–∞—Ä—ñ —ñ–Ω–¥–µ–∫—Å–∏ –≤–∏–¥–∞–ª–µ–Ω–æ');
  //   } catch (err) {
  //     if (err.code === 26) {
  //       console.log('‚ÑπÔ∏è –Ü–Ω–¥–µ–∫—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
  //     } else {
  //       throw err;
  //     }
  //   }

  //   // —á–∏—Ç–∞—î–º–æ json —Ñ–∞–π–ª–∏
  //   const cat0 = JSON.parse(fs.readFileSync('./CAT0.json', 'utf8'));
  //   const category = JSON.parse(fs.readFileSync('./CATEGORY.json', 'utf8'));

  //   // —Å–ª–æ–≤–Ω–∏–∫ ID -> NAME
  //   const namesMap = new Map();
  //   cat0.forEach((c) => {
  //     namesMap.set(c.CAT0_ID, c.CAT0_NAME);
  //   });

  //   // —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏
  //   const processed = new Set();

  //   // —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ–ª–µ–∫—Ü—ñ—é
  //   const saveDoc = async (id, parentId, level) => {
  //     if (!id || id === 0) return; // –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ 0
  //     if (processed.has(id)) return; // –≤–∂–µ –¥–æ–¥–∞–≤–∞–ª–∏

  //     const doc = {
  //       CAT_ID: id,
  //       CAT_NAME: namesMap.get(id) || '',
  //       CAT_PARENT_ID: parentId,
  //       CAT_LEVEL: level,
  //       CAT_TYPE_PROFITABLE: true,
  //     };

  //     await Categories.updateOne(
  //       { CAT_ID: id },
  //       { $set: doc },
  //       { upsert: true },
  //     );
  //     processed.add(id);
  //     console.log(`‚úÖ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: ${id} (${doc.CAT_NAME})`);
  //   };

  //   // –æ–±—Ö—ñ–¥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
  //   for (const cat of category) {
  //     await saveDoc(cat.CAT_ID0, null, 0);
  //     await saveDoc(cat.CAT_ID1, cat.CAT_ID0, 1);
  //     await saveDoc(cat.CAT_ID2, cat.CAT_ID1, 2);
  //     await saveDoc(cat.CAT_ID3, cat.CAT_ID2, 3);
  //   }

  //   console.log(
  //     `üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–¥–∞–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ ${processed.size} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π`,
  //   );
  // }

  // if (count === 1)
  //   migrate().catch((err) => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:', err));
};

module.exports = getAllCategories;
